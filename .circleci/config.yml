version: 2.1

aliases:
  # Supported lowest PHP version
  - &coverage-php-version
    php-version: [ '8.2' ]

  # Supported lowest Swoole versions
  - &coverage-swooles
    swoole: [ 'openswoole-v25.2.0', 'swoole-6.0.0' ]

  # Supported PHP versions
  - &php-versions
    php-version: ['8.2', '8.3', '8.4']

  # Supported Swoole/OpenSwoole versions
  - &swooles
    swoole: [ 'openswoole-v25.2.0', 'swoole-6.0.0' ]

  # Docker bake matrix - combinations of PHP version with Swoole extension and version
  - &bake-matrix
    parameters:
      <<: *php-versions
      <<: *swooles

  # CI matrix - combinations of PHP version with Symfony versions
  # and composer dependencies (std/locked, latest, lowest)
  - &ci-matrix
    parameters:
      <<: *php-versions
      <<: *swooles
      symfony-version: [ '6.4.*', '7.2.*' ]
      composer-build: [ 'std', 'lowest', 'latest' ]
    exclude:
      - composer-build: 'std'
        php-version: '8.3'
        swoole: 'openswoole-v25.2.0'
        symfony-version: '6.4.*'
      - composer-build: 'std'
        php-version: '8.3'
        swoole: 'swoole-6.0.0'
        symfony-version: '6.4.*'
      - composer-build: 'std'
        php-version: '8.4'
        swoole: 'openswoole-v25.2.0'
        symfony-version: '6.4.*'
      - composer-build: 'std'
        php-version: '8.4'
        swoole: 'swoole-6.0.0'
        symfony-version: '6.4.*'
      - composer-build: 'std'
        php-version: '8.2'
        swoole: 'openswoole-v25.2.0'
        symfony-version: '7.2.*'
      - composer-build: 'std'
        php-version: '8.2'
        swoole: 'swoole-6.0.0'
        symfony-version: '7.2.*'
      - composer-build: 'std'
        php-version: '8.3'
        swoole: 'openswoole-v25.2.0'
        symfony-version: '7.2.*'
      - composer-build: 'std'
        php-version: '8.3'
        swoole: 'swoole-6.0.0'
        symfony-version: '7.2.*'
      - composer-build: 'std'
        php-version: '8.4'
        swoole: 'openswoole-v25.2.0'
        symfony-version: '7.2.*'
      - composer-build: 'std'
        php-version: '8.4'
        swoole: 'swoole-6.0.0'
        symfony-version: '7.2.*'

  # Remote Docker config
  - &docker-remote-version
    setup_remote_docker:
      # https://circleci.com/docs/2.0/building-docker-images/#docker-version
      version: default
      docker_layer_caching: true

  # Filters
  - &filter-run-on-local-branches
    filters:
      branches:
        # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
        ignore: /pull\/[0-9]+/

  - &filter-run-on-forked-pull-requests
    filters:
      branches:
        # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
        only: /pull\/[0-9]+/

orbs:
  codecov: codecov/codecov@3.3.0

executors:
  swoole-bundle-docker-client:
    docker:
      - image: symfonywithswoole/docker-client:25.0.3
    working_directory: ~/workdir

  swoole-bundle-release-version:
    docker:
      - image: docker.io/symfonywithswoole/release-version-script:0.5.1
    working_directory: /usr/src/app

jobs:
  releaser-dry-run:
    executor: swoole-bundle-release-version
    environment:
      DEBUG: "1"
      DRY_RUN: "1"
      GH_TOKEN: "xxx"
      GH_REPOSITORY: "symfony-swoole/swoole-bundle"
    steps:
      - checkout
      - run:
          name: Dry run release-version script
          command: release-version
      - run:
          name: Dry run release-version script with debug
          when: on_fail
          environment:
            DEBUG: "1"
          command: release-version

  releaser:
    executor: swoole-bundle-release-version
    environment:
      DEBUG: "1"
      DRY_RUN: "0"
      GH_RELEASE_DRAFT: "false"
      GH_REPOSITORY: "symfony-swoole/swoole-bundle"
    steps:
      - checkout
      - run:
          name: Run release-version script
          command: release-version

  docker-buildx-bake:
    executor: swoole-bundle-docker-client
    parameters:
      php-version:
        type: string
      swoole:
        type: string
    steps:
      - checkout
      - *docker-remote-version
      - run:
          name: Export required dynamic env variables
          command: |-
            TAG="$PHP_VERSION-$SWOOLE-$CIRCLE_SHA1"
            echo "export TAG='$TAG'" >> $BASH_ENV
            echo "export PHP_API_VERSION=$(docker run --rm php:$PHP_VERSION php -i | grep 'PHP API' | sed -e 's/PHP API => //')" >> $BASH_ENV

            #if [ "latest" = "$SWOOLE_VERSION" ]; then
            #  # LATEST_SWOOLE_VERSION="$(wget -q -O /dev/stdout https://api.github.com/repos/swoole/swoole-src/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')"
            #  LATEST_SWOOLE_VERSION=4.12.1
            #  echo "LATEST_SWOOLE_VERSION=$LATEST_SWOOLE_VERSION"
            #  echo "export SWOOLE_VERSION='$LATEST_SWOOLE_VERSION'" >> $BASH_ENV
            #fi;

            SWOOLE_EXTENSION=$(echo $SWOOLE | tr '-' '\n' | head -n 1)
            echo "export SWOOLE_EXTENSION='$SWOOLE_EXTENSION'" >> $BASH_ENV
            SWOOLE_VERSION=$(echo $SWOOLE | tr '-' '\n' | tail -n 1)
            echo "export SWOOLE_VERSION='$SWOOLE_VERSION'" >> $BASH_ENV

            echo "export XDEBUG_TAG='3.2.0'" >> $BASH_ENV
      - run:
          name: Print env
          command: env
      - run:
          name: Print docker info
          command: docker info
      - run:
          name: Docker pass initialization
          command: docker-use-pass
      - run:
          name: Login to Docker Hub
          command: >-
            DOCKER_REGISTRY="docker.io"
            DOCKER_USERNAME="$DOCKER_HUB_USERNAME"
            DOCKER_PASSWORD="$DOCKER_HUB_TOKEN"
            docker-registry-login
      - run:
          name: Enable Docker Buildx
          environment:
            DOCKER_BUILDX_CONTEXT_CREATE: "1"
            DOCKER_BUILDX_BUILDER_CREATE: "1"
          command: docker-use-buildx
      - run:
          name: Docker Buildx Bake all required images
          command: |-
            if [ "8.2" = "$PHP_VERSION" ]; then
              export MERGE_COVERAGE_TAG="$PHP_VERSION-$CIRCLE_SHA1"
              export SERVICES="ci coverage-xdebug coverage-pcov merge-code-coverage"
            fi

            docker buildx bake --progress=plain $SERVICES
    environment:
      PHP_VERSION: << parameters.php-version >>
      SWOOLE: << parameters.swoole >>
      REGISTRY: docker.io
      NAMESPACE: symfonywithswoole
      IMAGE: swoole-bundle
      SERVICES: ci

  grumphp-ci:
    working_directory: /usr/src/app
    parameters:
      php-version:
        type: string
      swoole:
        type: string
      symfony-version:
        type: string
      composer-build:
        type: string
    steps:
      - checkout:
          path: /usr/src/app
      - run:
          name: Export required dynamic env variables for Composer
          command: |-
            if [ "std" = "$BUILD_TYPE" ]; then
              echo "export COMPOSER_ARGS=install" >> $BASH_ENV
              echo "export GRUMPHP_COMMAND=grumphp_complete" >> $BASH_ENV
            elif [ "latest" = "$BUILD_TYPE" ]; then
              echo "export COMPOSER_ARGS=update" >> $BASH_ENV
              echo "export GRUMPHP_COMMAND=grumphp_tests" >> $BASH_ENV
            elif [ "lowest" = "$BUILD_TYPE" ]; then
              echo "export COMPOSER_ARGS='update --prefer-lowest'" >> $BASH_ENV
              echo "export GRUMPHP_COMMAND=grumphp_tests" >> $BASH_ENV
            fi;
      - run:
          name: Run Composer
          command: |
            source "$BASH_ENV"
            composer config extra.symfony.require ${SYMFONY_VERSION}
            composer ${COMPOSER_ARGS} --no-progress --no-interaction --ansi
      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z $DATABASE_HOST 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Run GrumPHP
          command: |
            source "$BASH_ENV"
            composer run ${GRUMPHP_COMMAND}
    docker:
      - image: docker.io/symfonywithswoole/swoole-bundle-ci:<< parameters.php-version >>-<< parameters.swoole >>-$CIRCLE_SHA1
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_TOKEN
        user: app
        environment:
          DATABASE_HOST: '127.0.0.1'
          SYMFONY_VERSION: << parameters.symfony-version >>
          BUILD_TYPE: << parameters.composer-build >>
      - image: cimg/mysql:8.0
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_TOKEN
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: db
          MYSQL_USER: user
          MYSQL_PASSWORD: pass

  code-coverage-pcov-php-lowest:
    working_directory: /usr/src/app
    parameters:
      php-version:
        type: string
      swoole:
        type: string
    steps:
      - checkout:
          path: /usr/src/app
      - run:
          name: Run Composer
          command: |
            composer install --no-progress --no-interaction --ansi
      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z $DATABASE_HOST 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Run unit tests with coverage (pcov)
          command: composer run unit-code-coverage
      - run:
          name: Run feature tests with coverage (pcov)
          command: composer run feature-code-coverage
      - persist_to_workspace:
          root: /usr/src/app
          paths:
            - ./cov/*
    docker:
      - image: docker.io/symfonywithswoole/swoole-bundle-coverage-pcov:<< parameters.php-version >>-<< parameters.swoole >>-$CIRCLE_SHA1
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_TOKEN
        user: app
        environment:
          DATABASE_HOST: '127.0.0.1'
          SWOOLE: << parameters.swoole >>
      - image: cimg/mysql:8.0
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_TOKEN
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: db
          MYSQL_USER: user
          MYSQL_PASSWORD: pass

  code-coverage-xdebug-php-lowest:
    working_directory: /usr/src/app
    parameters:
      php-version:
        type: string
      swoole:
        type: string
    steps:
      - checkout:
          path: /usr/src/app
      - run:
          name: Run Composer
          command: |
            composer install --no-progress --no-interaction --ansi
      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z $DATABASE_HOST 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Run feature tests with coverage (xdebug) and retry
          command: /usr/src/app/tests/run-feature-tests-code-coverage.sh
      - persist_to_workspace:
          root: /usr/src/app
          paths:
            - ./cov/*
    docker:
      - image: docker.io/symfonywithswoole/swoole-bundle-coverage-xdebug:<< parameters.php-version >>-<< parameters.swoole >>-$CIRCLE_SHA1
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_TOKEN
        user: app
        environment:
          DATABASE_HOST: '127.0.0.1'
          SWOOLE: << parameters.swoole >>
      - image: cimg/mysql:8.0
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_TOKEN
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: db
          MYSQL_USER: user
          MYSQL_PASSWORD: pass

  process-coverage-results:
    working_directory: /usr/src/app
    steps:
      - checkout:
          path: /usr/src/app
      - run:
          name: Run Composer
          command: |
            composer install --no-progress --no-interaction --ansi
      - run:
          name: Prepare CodeClimate Code Coverage reporter
          command: |-
            wget -O cc-test-reporter https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
      - attach_workspace:
          at: /usr/src/app/cov
      - run:
          name: Merge code coverage files generated across test suites
          command: composer run merge-code-coverage
      - run:
          name: Send Code Coverage report to CodeClimate
          command: ./cc-test-reporter after-build -t clover --exit-code 0 --prefix /usr/src/app
      - codecov/upload:
          file: clover.xml
    docker:
      - image: docker.io/symfonywithswoole/swoole-bundle-merge-code-coverage:8.2-$CIRCLE_SHA1
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_TOKEN
        user: app
        environment:
          CC_TEST_REPORTER_ID: bf289560199c71f3aace641542bbe012262dd7c3381558fccf46dff27855a587

  check-composer-config:
    docker:
      - image: composer:2
    steps:
      - checkout
      - run:
          name: Validate composer configuration
          command: composer validate
      - run:
          name: Check if there are any out of date dependencies
          command: composer outdated --locked
  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine:stable
    steps:
      - checkout
      - run:
          name: Shellcheck "tests" directory
          command: shellcheck tests/*.sh

  validate-commit-message:
    docker:
      - image: node:lts-alpine
    steps:
      - checkout
      - run:
          name: Install git
          command: apk add --no-cache git
      - run:
          name: Install commitlint
          command: npm i -g @commitlint/cli @commitlint/config-conventional
      - run:
          name: Validate commit message format
          command: commitlint --from=HEAD~20 -V

workflows:
  version: 2.1
  pull-request-checks-trusted:
    when:
      not:
        equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - validate-commit-message:
          <<: *filter-run-on-local-branches
      - shellcheck:
          <<: *filter-run-on-local-branches
      - check-composer-config:
          <<: *filter-run-on-local-branches
      - releaser-dry-run:
          <<: *filter-run-on-local-branches
      - docker-buildx-bake:
          name: docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
          context: release-version-script-dockerhub
          matrix:
            <<: *bake-matrix
          requires:
            - shellcheck
            - check-composer-config
            - validate-commit-message
      - code-coverage-pcov-php-lowest:
          context: release-version-script-dockerhub
          matrix:
            parameters:
              <<: *coverage-php-version
              <<: *coverage-swooles
          requires:
            - docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
      - code-coverage-xdebug-php-lowest:
          context: release-version-script-dockerhub
          matrix:
            parameters:
              <<: *coverage-php-version
              <<: *coverage-swooles
          requires:
            - docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
      - grumphp-ci:
          name: grumphp-ci-php-<< matrix.php-version >>-<< matrix.swoole >>-symfony-<< matrix.symfony-version >>-<< matrix.composer-build >>
          context: release-version-script-github
          matrix:
            <<: *ci-matrix
          requires:
            - docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
      - process-coverage-results:
          context: release-version-script-dockerhub
          requires:
            - code-coverage-pcov-php-lowest
            - code-coverage-xdebug-php-lowest

  pull-request-checks-untrusted:
    when:
      not:
        equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - validate-commit-message:
          <<: *filter-run-on-forked-pull-requests
      - shellcheck:
          <<: *filter-run-on-forked-pull-requests
      - check-composer-config:
          <<: *filter-run-on-forked-pull-requests
      - releaser-dry-run:
          <<: *filter-run-on-forked-pull-requests
      - approve-docker-bake:
          type: approval
          requires:
            - shellcheck
            - check-composer-config
            - validate-commit-message
      - docker-buildx-bake:
          name: docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
          context: release-version-script-dockerhub
          matrix:
            <<: *bake-matrix
          requires:
            - approve-docker-bake
      - grumphp-ci:
          name: grumphp-ci-php-<< matrix.php-version >>-<< matrix.swoole >>-symfony-<< matrix.symfony-version >>-<< matrix.composer-build >>
          context: release-version-script-github
          matrix:
            <<: *ci-matrix
          requires:
            - docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
      - code-coverage-pcov-php-lowest:
          context: release-version-script-dockerhub
          matrix:
            parameters:
              <<: *coverage-php-version
              <<: *coverage-swooles
          requires:
            - docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
      - code-coverage-xdebug-php-lowest:
          context: release-version-script-dockerhub
          matrix:
            parameters:
              <<: *coverage-php-version
              <<: *coverage-swooles
          requires:
            - docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
      - process-coverage-results:
          context: release-version-script-dockerhub
          requires:
            - code-coverage-pcov-php-lowest
            - code-coverage-xdebug-php-lowest

  release:
    when:
      equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - shellcheck
      - check-composer-config
      - validate-commit-message
      - releaser-dry-run
      - docker-buildx-bake:
          name: docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
          context: release-version-script-dockerhub
          matrix:
            <<: *bake-matrix
      - grumphp-ci:
          name: grumphp-ci-php-<< matrix.php-version >>-<< matrix.swoole >>-symfony-<< matrix.symfony-version >>-<< matrix.composer-build >>
          context: release-version-script-github
          matrix:
            <<: *ci-matrix
          requires:
            - docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
      - code-coverage-pcov-php-lowest:
          context: release-version-script-dockerhub
          matrix:
            parameters:
              <<: *coverage-php-version
              <<: *coverage-swooles
          requires:
            - docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
      - code-coverage-xdebug-php-lowest:
          context: release-version-script-dockerhub
          matrix:
            parameters:
              <<: *coverage-php-version
              <<: *coverage-swooles
          requires:
            - docker-buildx-bake-<< matrix.php-version >>-<< matrix.swoole >>
      - process-coverage-results:
          context: release-version-script-dockerhub
          requires:
            - code-coverage-pcov-php-lowest
            - code-coverage-xdebug-php-lowest
      - approve-release:
          type: approval
          requires:
            - releaser-dry-run
            - grumphp-ci
            - code-coverage-pcov-php-lowest
            - code-coverage-xdebug-php-lowest
            - process-coverage-results
      - releaser:
          context: release-version-script-github
          requires:
            - approve-release
